@page "/pet"
@implements IDisposable
@inject IJSRuntime JS

<table width="100%" style="text-align:center;">
    <tr>
        <td><h1>XiaoZhiSharp</h1></td>
    </tr>
    <tr>
        <td>
            <div class="pets">
                <div id="message" style="opacity:0;">@Message</div>
                <audio id="my_audio"></audio>
                <canvas id="mycanvas" width="300" height="500" @ref="canvasElement"></canvas>
            </div>
        </td>
    </tr>
    <tr>
        <td><h2>@Message</h2></td>
    </tr>
    <tr>
        <td><span style="font-size:xx-large;zoom:2.0;">@EmotionText</span></td>
    </tr>
    <tr>
        <td><h3>@MyMessage</h3></td>
    </tr>
    <tr>
        <td><Button Type="@ButtonType.Primary" @onclick="SendAudio">开启自动语音</Button></td>
    </tr>
    <tr>
        <td style="height:100px;">

            <Button Type="@ButtonType.Primary" @onclick='() => Ku()'>
                哭
            </Button>
            <Button Type="@ButtonType.Primary" @onclick='() => JS.InvokeVoidAsync("color")'>
                可乐
            </Button>
            <Button Type="@ButtonType.Primary" @onclick='() => JS.InvokeVoidAsync("colorAndCrisps")'>
                薯片
            </Button>

        </td>
    </tr>
    <tr>
        <td>
            <input @bind="newMessage" @onkeydown="HandleKeyDown" placeholder="输入消息" />
            <Button Type="@ButtonType.Primary" @onclick="SendMessage">发送文字消息</Button>
        </td>
    </tr>
    <tr>
        <td style="height:20px;"></td>
    </tr>
    <tr>
        <td>
            <img src="images/wx.jpg" width="160" />
        </td>
    </tr>
</table>

@* <br> *@
@* <Input @bind="newMessage" @onkeydown="HandleKeyDown" placeholder="输入消息" TValue="string" /> *@
@* <Button @onclick="SendMessage">发送文字消息</Button> *@


@* @foreach (var msg in MessageList) {  *@
@*     @msg <br> *@
@* } *@
<script src="pet/js/lib/jquery.min.js" type="text/javascript" charset="utf-8"></script>
<!-- Live2D Library -->
<script src="pet/js/lib/live2d.min.js" type="text/javascript" charset="utf-8"></script>
<script src="pet/js/common.js" type="text/javascript" charset="utf-8"></script>
<script src="pet/js/pet.js?time=2" type="text/javascript" charset="utf-8"></script>
<script src="pet/js/xiaomai.js?time=2" type="text/javascript" charset="utf-8"></script>
<script>
    window.kuku = function () {
    console.log("Test function ku");
    ku();
    };
</script>
@code {
    private ElementReference canvasElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("InitLive2D", canvasElement);
        }
    }

    private System.Timers.Timer _timer = new System.Timers.Timer(1000) { Enabled = true };
    private string newMessage;

    private async Task Ku()
    {
        await JS.InvokeVoidAsync("kuku");
    }

    public static bool IsKu = false;

    private void _agent_OnMessageEvent(string message)
    {
        dynamic msg = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(message);
        if (msg != null)
        {
            if (msg.type == "stt")
            {
                MyMessage = msg.text;
                _ = _agent.StopRecording();
            }
            if (msg.type == "llm")
            {
                Emotion = msg.emotion;
                EmotionText = msg.text;
                if (msg.emotion == "crying")
                {
                    IsKu = true;
                }
            }
            if (msg.type == "tts")
            {
                if (msg.state == "sentence_start" || msg.state == "sentence_end")
                {
                    Message = msg.text;
                    //_ = _agent.StopRecording();
                }
                if (msg.state == "stop")
                {
                    //_ = _agent.StopRecording();
                    _ = _agent.StartRecording("auto");
                }
            }
        }
        MessageList.Add(message);
    }

    protected override async Task OnInitializedAsync()
    {
        _timer.Elapsed += Timer_Elapsed;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async void Timer_Elapsed(object sender, EventArgs args)
    {
        if (IsKu) {
            IsKu = false;
            await Ku();
        }

        await Task.Factory.StartNew(() =>
        {
            InvokeAsync(() => { StateHasChanged(); return Task.CompletedTask; });
        });
    }

    void IDisposable.Dispose()
    {
        _timer.Close();
    }
}
